{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-react/./src/commands/commands.ts","webpack://office-addin-taskpane-react/./src/taskpane/components/TFN/ReformateData.tsx","webpack://office-addin-taskpane-react/webpack/bootstrap"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\nimport { reformatData } from \"../taskpane/components/TFN/ReformateData\";\n\n/* global Office */\n\nOffice.onReady(() => {\n  // If needed, Office.js is ready to be called.\n});\n\n/**\n * Shows a notification when the add-in command is executed.\n * @param event\n */\nfunction action(event: Office.AddinCommands.Event) {\n  const message: Office.NotificationMessageDetails = {\n    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n    message: \"Performed action.\",\n    icon: \"Icon.80x80\",\n    persistent: true,\n  };\n\n  // Show a notification message.\n  Office.context.mailbox.item.notificationMessages.replaceAsync(\"ActionPerformanceNotification\", message);\n\n  // Be sure to indicate when the add-in command function is complete.\n  event.completed();\n}\n\nfunction dataReformat(event) {\n\n  reformatData()\n  event.completed();\n  // try {\n\n\n  //   Excel.run(function (context) {\n  //     // Access the active worksheet\n  //     var activeSheet = context.workbook.worksheets.getActiveWorksheet();\n\n  //     // Define the mapping between old headers and new headers\n  //     var headerMapping = {\n  //       \"Donor Ref for S'Force\": \"Contact_1_TFN_ID_COPY__C\",\n  //       \"First Name/Org\": \"NPSP__CONTACT1_FIRSTNAME__C\",\n  //       \"Surname\": \"NPSP__CONTACT1_LASTNAME__C\",\n  //       \"D\": \"NPSP__DONATION_CAMPAIGN_NAME__C\",\n  //       \"E\": \"DONATION_PROJECT__C\",\n  //       \"F\": \"NPSP__DONATION_NAME__C\",\n  //       \"Paid? (Paid/Blank)\": \"NPSP__DONATION_STAGE__C\",\n  //       \"Payment Type for Salesforce\": \"Donation_Donation_Type__c\",\n  //       \"I\": \"Donation_Donation_Amount__c\",\n  //       \"Gift Aid\": \"Donation_Gift_Aid_Declaration__c\",\n  //       \"K\": \"NPSP__DONATION_AMOUNT__C\",\n  //       \"Payment Date\": \"NPSP__DONATION_DATE__C\",\n  //       \"M\": \"NPSP__DONATION_RECORD_TYPE_NAME__C\",\n  //       \"Company Name\": \"Organisation\",\n  //       \"Donation Donor\": \"Donation Donor\",\n  //     };\n\n  //     // Get the range of headers and data\n  //     var getRang = activeSheet.getUsedRange();\n  //     var getValue = getRang.load(\"values\");\n\n  //     // Execute the queued commands\n  //     return context.sync()\n  //       .then(function () {\n  //         // Create a new worksheet\n  //         var newSheet = context.workbook.worksheets.add(\"Reformat\");\n  //         newSheet.activate()\n\n  //         // Write new headers to the new sheet\n  //         newSheet.getRange(\"A1:O1\").values = [Object.values(headerMapping)];\n\n  //         // Get the data rows\n  //         var data = getValue.values;\n  //         var CampaignName = getValue.values[0][0]; // use index for the Campaing Name \n\n  //         // Loop through each set of 10 rows\n  //         for (var row = 10; row < data.length; row += 10) {\n  //           var rowData = data.slice(row, row + 10);\n\n  //           // Initialize row index new sheet\n  //           var newDataRowIndex = 2;\n\n  //           // Process each row in the set\n  //           rowData.forEach(function (rowValues) {\n  //             var dataRow = rowValues;          // Use index for the Correspondiing data\n  //             var secondHeaderRow = data[9];   //  Use index for the second Header row\n  //             var firstHeaderRow = data[8];   //   Use index for the First Header row\n  //             var firstName = dataRow[1]     //    Use index for the Name\n  //             var getDate = dataRow[19]     //     Use index for the Date\n  //             // console.log(\"firstName:\", firstName)\n  //             // console.log(\"getDate:\", getDate)\n\n  //             var serialDateNumber = parseInt(getDate); // Convert the serial date number to an integer\n  //             var dateValue = new Date((serialDateNumber - 25569) * 86400 * 1000); // Convert the serial date number to Excel (25569 days)\n  //             var formattedDate = dateValue.getDate() + '/' + (dateValue.getMonth() + 1) + '/' + dateValue.getFullYear(); // Format the date as MM/dd/yyyy\n\n  //             // console.log(\"CampaignName\", formattedDate)\n\n  //             // Map and write corresponding data to the new sheet\n  //             for (var i = 6; i < 14; i++) {          // Loop through index 6 to 14\n  //               if (dataRow[i]) {                  // If there is data in dataRow at index i\n  //                 var newDataRow = [];\n  //                 for (var oldHeader in headerMapping) {\n  //                   var oldHeaderIndex = secondHeaderRow.indexOf(oldHeader);   // Use secondHeaderRow for index mapping\n  //                   var newHeaderIndex = Object.values(headerMapping).indexOf(headerMapping[oldHeader]);\n\n  //                   if (headerMapping[oldHeader] === \"DONATION_PROJECT__C\") {\n  //                     newDataRow[newHeaderIndex] = firstHeaderRow[i];   // Use the data from firstHeaderRow \n  //                   }\n  //                   else if (headerMapping[oldHeader] === \"NPSP__DONATION_CAMPAIGN_NAME__C\") {\n  //                     newDataRow[newHeaderIndex] = CampaignName\n  //                   }\n  //                   else if (headerMapping[oldHeader] === \"NPSP__DONATION_NAME__C\") {\n  //                     newDataRow[newHeaderIndex] = firstName + \" - Donation to \" + secondHeaderRow[i] + \" - \" + formattedDate\n  //                   }\n  //                   else if (headerMapping[oldHeader] === \"Donation_Donation_Amount__c\" || headerMapping[oldHeader] === \"NPSP__DONATION_AMOUNT__C\") {\n  //                     newDataRow[newHeaderIndex] = dataRow[i];\n  //                   }\n  //                   else if (headerMapping[oldHeader] === \"NPSP__DONATION_RECORD_TYPE_NAME__C\") {\n  //                     newDataRow[newHeaderIndex] = \"Project Donation\";       // Set static value\n  //                   }\n  //                   else if (headerMapping[oldHeader] === \"NPSP__DONATION_DATE__C\") {\n  //                     newDataRow[newHeaderIndex] = formattedDate;\n  //                   }\n  //                   else {\n  //                     newDataRow[newHeaderIndex] = dataRow[oldHeaderIndex];\n  //                   }\n  //                 }\n  //                 newSheet.getRange(\"A\" + newDataRowIndex + \":O\" + newDataRowIndex).values = [newDataRow];\n  //                 newDataRowIndex++; // Move to the next row\n  //               }\n  //             }\n  //             // newDataRowIndex += 1; // Move to the next set of rows\n  //           });\n  //         }\n  //         // Auto-fit columns after adding data\n  //         newSheet.getUsedRange().format.autofitColumns();\n  //       }).catch(function (error) {\n  //         console.log(error)\n  //       });\n  //   });\n  // } catch (error) {\n  //   console.log(error)\n  // }\n}\n\n// Register the function with Office.\nOffice.actions.associate(\"action\", action);\nOffice.actions.associate(\"dataReformat\", dataReformat);\n","\r\n\r\nexport function reformatData() {\r\n    try {\r\n        Excel.run(function (context) {\r\n            // Access the active worksheet\r\n            var activeSheet = context.workbook.worksheets.getActiveWorksheet();\r\n\r\n            // Define the mapping between old headers and new headers\r\n            var headerMapping = {\r\n                \"Donor Ref for S'Force\": \"Contact_1_TFN_ID_COPY__C\",\r\n                \"First Name/Org\": \"NPSP__CONTACT1_FIRSTNAME__C\",\r\n                \"Surname\": \"NPSP__CONTACT1_LASTNAME__C\",\r\n                \"D\": \"NPSP__DONATION_CAMPAIGN_NAME__C\",\r\n                \"E\": \"DONATION_PROJECT__C\",\r\n                \"F\": \"NPSP__DONATION_NAME__C\",\r\n                \"Paid? (Paid/Blank)\": \"NPSP__DONATION_STAGE__C\",\r\n                \"Payment Type for Salesforce\": \"Donation_Donation_Type__c\",\r\n                \"I\": \"Donation_Donation_Amount__c\",\r\n                \"Gift Aid\": \"Donation_Gift_Aid_Declaration__c\",\r\n                \"K\": \"NPSP__DONATION_AMOUNT__C\",\r\n                \"Payment Date\": \"NPSP__DONATION_DATE__C\",\r\n                \"M\": \"NPSP__DONATION_RECORD_TYPE_NAME__C\",\r\n                \"Company Name\": \"Organisation\",\r\n                \"Donation Donor\": \"Donation Donor\",\r\n            };\r\n\r\n            // Get the range of headers and data\r\n            var getRang = activeSheet.getUsedRange();\r\n            var getValue = getRang.load(\"values\");\r\n\r\n            // Execute the queued commands\r\n            return context.sync()\r\n                .then(function () {\r\n                    // Create a new worksheet or get existing \"Reformat\" sheet\r\n                    var newSheet = context.workbook.worksheets.getItemOrNullObject(\"Reformat\");\r\n                    newSheet.load(\"isNullObject\");\r\n\r\n                    return context.sync()\r\n                        .then(function () {\r\n                            if (newSheet.isNullObject) {\r\n                                newSheet = context.workbook.worksheets.add(\"Reformat\");\r\n                            } else {\r\n                                newSheet.getUsedRange().clear();\r\n                            }\r\n                            newSheet.activate();\r\n\r\n                            // Write new headers to the new sheet\r\n                            newSheet.getRange(\"A1:O1\").values = [Object.values(headerMapping)];\r\n\r\n                            // Get the data rows\r\n                            var data = getValue.values;\r\n                            var CampaignName = getValue.values[0][0]; // use index for the Campaign Name\r\n\r\n                            // Initialize row index for new sheet\r\n                            var newDataRowIndex = 2;\r\n\r\n                            // Process each row\r\n                            data.forEach(function (dataRow, rowIndex) {\r\n                                if (rowIndex >= 10) { // Start from row 10\r\n                                    var secondHeaderRow = data[9];\r\n                                    var firstHeaderRow = data[8];\r\n                                    var firstName = dataRow[1];\r\n                                    var surName = dataRow[2];\r\n                                    var getDate = dataRow[19];\r\n                                    var salesForce = dataRow[24];\r\n\r\n                                    // Skip rows where salesForce (case-insensitive) is \"y\"\r\n                                    if (typeof salesForce === 'string' && salesForce.trim().toLowerCase() === 'y') {\r\n                                        return;\r\n                                    }\r\n\r\n                                    var formattedDate = '';\r\n                                    if (!isNaN(parseInt(getDate))) {\r\n                                        var serialDateNumber = parseInt(getDate);\r\n                                        var dateValue = new Date((serialDateNumber - 25569) * 86400 * 1000);\r\n                                        formattedDate = dateValue.getDate() + '/' + (dateValue.getMonth() + 1) + '/' + dateValue.getFullYear();\r\n                                    }\r\n\r\n                                    // Map and write corresponding data to the new sheet\r\n                                    for (var i = 6; i < 14; i++) {\r\n                                        if (dataRow[i]) {\r\n                                            var newDataRow = [];\r\n                                            for (var oldHeader in headerMapping) {\r\n                                                var oldHeaderIndex = secondHeaderRow.indexOf(oldHeader);\r\n                                                var newHeaderIndex = Object.values(headerMapping).indexOf(headerMapping[oldHeader]);\r\n\r\n                                                if (headerMapping[oldHeader] === \"DONATION_PROJECT__C\") {\r\n                                                    newDataRow[newHeaderIndex] = firstHeaderRow[i];\r\n                                                } else if (headerMapping[oldHeader] === \"NPSP__DONATION_CAMPAIGN_NAME__C\") {\r\n                                                    newDataRow[newHeaderIndex] = CampaignName;\r\n                                                } else if (headerMapping[oldHeader] === \"NPSP__DONATION_NAME__C\") {\r\n                                                    newDataRow[newHeaderIndex] = firstName + \" \" + surName + \" - Donation to \" + secondHeaderRow[i] + \" - \" + formattedDate;\r\n                                                } else if (headerMapping[oldHeader] === \"Donation_Donation_Amount__c\" || headerMapping[oldHeader] === \"NPSP__DONATION_AMOUNT__C\") {\r\n                                                    newDataRow[newHeaderIndex] = dataRow[i];\r\n                                                } else if (headerMapping[oldHeader] === \"NPSP__DONATION_RECORD_TYPE_NAME__C\") {\r\n                                                    newDataRow[newHeaderIndex] = \"Project Donation\";\r\n                                                } else if (headerMapping[oldHeader] === \"NPSP__DONATION_DATE__C\") {\r\n                                                    newDataRow[newHeaderIndex] = formattedDate;\r\n                                                } else {\r\n                                                    newDataRow[newHeaderIndex] = dataRow[oldHeaderIndex];\r\n                                                }\r\n                                            }\r\n                                            newSheet.getRange(\"A\" + newDataRowIndex + \":O\" + newDataRowIndex).values = [newDataRow];\r\n                                            newDataRowIndex++; // Move to the next row\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            // Auto-fit columns after adding data\r\n                            newSheet.getUsedRange().format.autofitColumns();\r\n                        });\r\n                }).catch(function (error) {\r\n                    console.log(error);\r\n                });\r\n        });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["ReformateData_1","Excel","run","context","activeSheet","workbook","worksheets","getActiveWorksheet","headerMapping","getValue","getUsedRange","load","sync","then","newSheet","getItemOrNullObject","isNullObject","add","clear","activate","getRange","values","Object","data","CampaignName","newDataRowIndex","forEach","dataRow","rowIndex","secondHeaderRow","firstHeaderRow","firstName","surName","getDate","salesForce","trim","toLowerCase","formattedDate","isNaN","parseInt","serialDateNumber","dateValue","Date","getMonth","getFullYear","i","newDataRow","oldHeader","oldHeaderIndex","indexOf","format","autofitColumns","catch","error","console","log","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","require","Office","onReady","actions","associate","event","message","type","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","mailbox","item","notificationMessages","replaceAsync","completed","reformatData"],"sourceRoot":""}